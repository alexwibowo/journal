/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.2.1/userguide/java_library_plugin.html
 */

repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

buildscript {
 	repositories {
    		maven {
      			url "https://plugins.gradle.org/m2/"
    		}
  	}
	dependencies {
		classpath 'com.adarshr:gradle-test-logger-plugin:1.6.0'
	}
}

subprojects {
	apply plugin: 'java-library'
	apply plugin: 'idea'
	apply plugin: 'com.adarshr.test-logger'

	sourceCompatibility = 1.8
	targetCompatibility = 1.8

	idea {
		module {
			downloadSources = true
		}
	}

	dependencies {
    		// This dependency is exported to consumers, that is to say found on their compile classpath.
		api group:"org.jetbrains", name:"annotations", version:jetbrainsAnnotationsVersion

    		// This dependency is used internally, and not exposed to consumers on their own compile classpath.
    		implementation 'com.google.guava:guava:27.0.1-jre'

		testImplementation group:"org.assertj", name:"assertj-core", version:assertjVersion
		testImplementation group:"org.awaitility", name:"awaitility", version:awaitilityVersion
		testImplementation group:"org.mockito", name:"mockito-core", version:mockitoVersion
		testImplementation group:"org.mockito", name:"mockito-junit-jupiter", version:mockitoVersion
		testImplementation group:"org.junit.jupiter", name:"junit-jupiter-api", version:junitJupiterEngineVersion
		testImplementation group:"org.junit.jupiter", name:"junit-jupiter-engine", version:junitJupiterEngineVersion
		testImplementation group:"org.junit.jupiter", name:"junit-jupiter-params", version:junitJupiterEngineVersion
		// The junit-platform-launcher dependency provides a public API for configuring and launching tests. This API is typically used by IDEs and build tools.
		testImplementation group:"org.junit.platform", name:"junit-platform-launcher", version:junitPlatformVersion
		// enable Spring Extension for JUnit5


	}


	test {
		/** Configure standard test to run using JUnit5 platform */
		useJUnitPlatform()

	}
	testlogger {
		theme 'standard'
		showExceptions true
		slowThreshold 2000
		showSummary true
		showPassed true
		showSkipped true
		showFailed true
		showStandardStreams false
		showPassedStandardStreams true
		showSkippedStandardStreams true
		showFailedStandardStreams true
	}
}


plugins.withType(JavaPlugin) {
	task testJar(type: Jar) {
		classifier "test"
		from sourceSets.test.output
	}

	/** Produces sources JAR */
	task sourcesJar(type: Jar, dependsOn: classes) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}

	/** Produces javadoc JAR */
	task javadocJar(type: Jar, dependsOn: javadoc) {
		classifier = 'javadoc'
		from javadoc.destinationDir
	}

	artifacts {
		archives sourcesJar
		archives javadocJar
	}
}
